name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.24'
  REGISTRY: docker.io
  IMAGE_NAME: aladex/kinozal_monitor

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
        continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from Git tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build binaries for multiple platforms
        run: |
          mkdir -p dist

          # Linux AMD64
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-w -s" -o dist/kinozal_monitor-linux-amd64 .

          # Linux ARM64
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-w -s" -o dist/kinozal_monitor-linux-arm64 .

          # Windows AMD64
          GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-w -s" -o dist/kinozal_monitor-windows-amd64.exe .

          # macOS AMD64
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-w -s" -o dist/kinozal_monitor-darwin-amd64 .

          # macOS ARM64
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-w -s" -o dist/kinozal_monitor-darwin-arm64 .

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/kinozal_monitor-linux-amd64
            dist/kinozal_monitor-linux-arm64
            dist/kinozal_monitor-windows-amd64.exe
            dist/kinozal_monitor-darwin-amd64
            dist/kinozal_monitor-darwin-arm64
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}